{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","require","useEffect","GifGrid","loading","state","setState","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qLAKaA,EAAc,SAAC,GAAsB,IAAnBC,EAAkB,EAAlBA,cAAkB,EAERC,mBAAS,IAFD,mBAEtCC,EAFsC,KAE1BC,EAF0B,KAiB7C,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACtCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAlBI,SAAEP,GACdF,EAAcE,EAAEQ,OAAOF,a,QCRlBG,EAAc,SAAC,GAAe,IAAdC,EAAa,EAAbA,MAAMC,EAAO,EAAPA,IAC/B,OACI,sBAAKC,UAAU,OAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAKA,Q,uBCJJK,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbN,EADa,iDACmCO,UAAWF,GAD9C,+DAEAG,MAAMR,GAFN,cAEbS,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAO,IAAD,EACzB,MAAM,CACFC,GAAGD,EAAIC,GACPhB,MAAMe,EAAIf,MACVC,IAAG,UAACc,EAAIE,cAAL,aAAC,EAAYC,iBAAiBjB,QATtB,kBAaZY,GAbY,4CAAH,sD,ECAYM,EAAQ,GAAhCjC,E,EAAAA,SAAUkC,E,EAAAA,UCELC,EAAU,SAAC,GAAc,IAAbf,EAAY,EAAZA,SAAY,EDCT,SAACA,GAAY,IAAD,EAEVpB,EAAS,CAC/B0B,KAAK,GACLU,SAAQ,IAJwB,mBAE7BC,EAF6B,KAEtBC,EAFsB,KAmBpC,OAZAJ,GAAW,WACPf,EAASC,GACJmB,MAAM,SAAAC,GACHC,YAAY,WACRH,EAAS,CACLZ,KAAKc,EACLJ,SAAQ,MAEd,UAEZ,CAAChB,IAEIiB,EClByBK,CAAatB,GAAjCW,EAFqB,EAE1BL,KAAaU,EAFa,EAEbA,QAEpB,OACI,qCACI,mCAAOhB,KACLgB,GAAW,wCAEb,qBAAKpB,UAAU,YAAf,SAEYe,EAAOH,KAAK,SAACC,GAAD,OACR,cAAC,EAAD,eAEQA,GADCA,EAAIC,aCb5Ba,EAAe,WAAM,IAAD,EACO3C,mBAAS,CAAC,oBADjB,mBACtB4C,EADsB,KACX7C,EADW,KAG7B,OACI,qCACI,gDACA,cAAC,EAAD,CAAaA,cAAkBA,IAC/B,uBACA,6BAEQ6C,EAAWhB,KAAI,SAAAR,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MCTlCyB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.d312c496.chunk.js","sourcesContent":["\r\nimport React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const AddCategory = ( { setCategories })=>{\r\n\r\n    const [inputValue, setInputValue ] = useState('');\r\n    \r\n    const cambios = ( e ) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const submitChange = (e)=>{\r\n        e.preventDefault();\r\n        \r\n        if(inputValue.trim().length > 2){\r\n            setCategories( cats => [inputValue,...cats]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return(\r\n        <form onSubmit={ submitChange }>\r\n            <input\r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ cambios } />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories:PropTypes.func.isRequired\r\n}","import React from 'react';\r\n\r\nexport const GifGridItem = ({title,url})=>{\r\n    return(\r\n        <div className=\"card\">\r\n            <img src={url} alt={title} />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}","\r\n\r\nexport const getGifs = async(category) =>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI( category) }&limit=12&api_key=SSSRKWLdyDKeacJI9Rxq8G8YSNnuV82X`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img =>{\r\n        return{\r\n            id:img.id,\r\n            title:img.title,\r\n            url:img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n\r\n}","import { getGifs } from '../helpers/getGifs';\r\n\r\nconst { useState, useEffect } = require(\"react\");\r\n\r\n\r\nexport const useFetchGifs = (category)=>{\r\n\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n\r\n    useEffect( ()=>{\r\n        getGifs( category)\r\n            .then( imgs =>{\r\n                setTimeout( ()=>{\r\n                    setState({\r\n                        data:imgs,\r\n                        loading:false\r\n                    })\r\n                },3000);\r\n            })\r\n    },[category]);\r\n\r\n    return state;\r\n\r\n}\r\n","import React from 'react';\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nexport const GifGrid = ({category})=>{\r\n    //llama el custom hook\r\n    const {data:images, loading } = useFetchGifs(category);\r\n\r\n    return(\r\n        <>\r\n            <h3> { category }</h3>\r\n            { loading && <p>Loading</p> }\r\n\r\n            <div className=\"card-grid\">\r\n                    {\r\n                        images.map( (img) =>(\r\n                            <GifGridItem \r\n                                key={img.id}\r\n                                {...img}/>\r\n                        ))\r\n                    }\r\n            </div>\r\n        </>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () =>{\r\n    const [categories,setCategories] =  useState(['Hombre ara√±a']);\r\n\r\n    return(\r\n        <>\r\n            <h2>Gif expert app</h2>\r\n            <AddCategory setCategories = { setCategories }/>\r\n            <hr />\r\n            <ol>\r\n                {\r\n                    categories.map(category =>(\r\n                        <GifGrid \r\n                            key={ category }\r\n                            category={ category }/>\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}